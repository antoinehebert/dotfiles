# Create a new directory and enter it
function md() {
   mkdir -p "$@" && cd "$@"
}

# find shorthand
function f() {
   if [ $2 ]; then
      find $1 -iname "$2"
   else
      find . -iname "$1"
   fi
}   

# Start an HTTP server from a directory, optionally specifying the port
function server() {
   local port="${1:-8000}"
   open "http://localhost:${port}/"
   # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
   # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
   python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# Syntax-highlight JSON strings or files
function json() {
   if [ -p /dev/stdin ]; then
      # piping, e.g. `echo '{"foo":42}' | json`
      python -mjson.tool | pygmentize -l javascript
   else
      # e.g. `json '{"foo":42}'`
      python -mjson.tool <<< "$*" | pygmentize -l javascript
   fi
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
   mkdir -p "$1"
   git archive master | tar -x -C "$1"
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
   printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
   echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
   perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
   echo # newline
}

# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
   if [ -f $1 ] ; then
      case $1 in
         *.tar.bz2) tar xjf $1 ;;
         *.tar.gz) tar xzf $1 ;;
         *.bz2) bunzip2 $1 ;;
         *.rar) rar x $1 ;;
         *.gz) gunzip $1 ;;
         *.tar) tar xf $1 ;;
         *.tbz2) tar xjf $1 ;;
         *.tgz) tar xzf $1 ;;
         *.zip) unzip $1 ;;
         *.Z) uncompress $1 ;;
         *.7z) 7z x $1 ;;
         *) echo "'$1' cannot be extracted via extract()" ;;
      esac
   else
      echo "'$1' is not a valid file"
   fi
}


# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# hop sftp|ssh|scp through a server
hop() {
  cmd_regex="^(ssh|scp|sftp)$" 
  if [[ "$1" == "-h" || "$1" == "-?" || ! "$1" =~ $cmd_regex ]]; then
    echo "usage: hop command server1 server2"
    echo ""
    echo "command can be ssh scp or sftp"
    echo "example:"
    echo "$ hop sftp root@evelocity-test root@30A02P"
    echo "$ hop scp root@evelocity-test root@30A02P:/opt/opto/data/optoscreener/DirectoryToMonitor/*.sr ."
    return 0
  fi
  cmd=$1
  man_in_the_middle=$2
  shift 2
  # 60 here is the timeout in seconds
  $cmd -o ProxyCommand="ssh $man_in_the_middle nc -w 60 %h %p" $@
}

